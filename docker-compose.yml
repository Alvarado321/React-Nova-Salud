version: '3.8'

#* Instrucciones de uso:

# Construcción de imágenes:
#* - Para construir imágenes: docker compose build
# - Para reconstruir un servicio específico: docker compose up -d --no-deps --build [servicio]
# - Para reconstruir todos los servicios: docker compose up -d --build
# - Para forzar la reconstrucción sin caché: docker compose build --no-cache
# - Para construir una imagen específica: docker compose build [servicio]

# Inicio de servicios:
#* - Para iniciar todos los servicios en segundo plano (recomendado): docker compose up -d
# - Para iniciar servicios en primer plano: docker compose up
# - Para iniciar servicios sin construir imágenes: docker compose up -d --no-build
# - Para escalar servicios: docker compose up -d --scale [servicio]=[numero]
# - Para iniciar servicios específicos: docker compose up -d [servicio1] [servicio2]

# Detención de servicios:
# - Para detener servicios: docker compose down
# - Para detener servicios y eliminar volúmenes asociados: docker compose down -v
# - Para detener servicios y eliminar imágenes: docker compose down --rmi all
# - Para detener servicios específicos: docker compose stop [servicio]
# - Para detener todos los contenedores: docker compose stop

# Logs y monitoreo:
# - Para ver logs: docker compose logs -f [servicio]
# - Para listar los servicios activos: docker compose ps
# - Para ver logs con timestamp: docker compose logs -f --timestamps [servicio]
# - Para ver últimas N líneas: docker compose logs -f --tail=[N] [servicio]
# - Para ver uso de recursos: docker stats
# - Para ver contenedores en ejecución: docker ps

# Administración de servicios:
# - Para reiniciar un servicio específico: docker compose restart [servicio]
# - Para ejecutar un comando en un contenedor: docker compose exec [servicio] [comando]
# - Para entrar a un contenedor: docker compose exec [servicio] sh
# - Para ver variables de entorno: docker compose exec [servicio] env
# - Para copiar archivos al contenedor: docker cp [archivo] [contenedor]:[ruta]
# - Para copiar archivos desde el contenedor: docker cp [contenedor]:[ruta] [archivo]

# Limpieza:
# - Para eliminar imágenes huérfanas: docker image prune
# - Para eliminar todos los contenedores parados: docker container prune
# - Para eliminar todos los volúmenes no usados: docker volume prune
# - Para eliminar todo lo no usado: docker system prune -a
# - Para limpiar caché de construcción: docker builder prune

# Debugging:
# - Para inspeccionar un contenedor: docker inspect [contenedor]
# - Para ver eventos en tiempo real: docker events
# - Para ver historial de un contenedor: docker history [contenedor]
# - Para ver uso de red: docker network ls
# - Para ver información del sistema: docker info

services:
  # Sistema de gestión de salud Nova Salud
  # Desarrollado por: Grupo Nova Salud
  db:
    container_name: novasalud-mysql
    image: mysql:8.0
    ports:
      - "3307:3306"
    environment:
      - MYSQL_ROOT_PASSWORD=novasalud123
      - MYSQL_DATABASE=nova_salud
      - MYSQL_USER=admin
      - MYSQL_PASSWORD=admin123
    volumes:
      - mysql_data:/var/lib/mysql
      - ./server/config/commandsql.txt:/docker-entrypoint-initdb.d/init.sql
    restart: unless-stopped
    command: --default-authentication-plugin=mysql_native_password

  # Frontend service
  # Access: http://localhost:3000
  client:
    container_name: novasalud-frontend
    build:
      context: ./client
      dockerfile: Dockerfile
    ports:
      - "3000:80"
    depends_on:
      - server
    environment:
      - REACT_APP_API_URL=http://localhost:4000
    restart: unless-stopped

  # Backend service
  # Access: http://localhost:4000
  server:
    container_name: novasalud-backend
    build:
      context: ./server
      dockerfile: Dockerfile
    ports:
      - "4000:4000"
    depends_on:
      - db
    environment:
      - DB_HOST=db
      - DB_USER=admin
      - DB_PASSWORD=admin123
      - DB_NAME=nova_salud
    restart: unless-stopped

  # phpMyAdmin service
  # Access: http://localhost:5000
  phpmyadmin:
    container_name: novasalud-phpmyadmin
    image: phpmyadmin/phpmyadmin
    ports:
      - "5000:80"
    environment:
      - PMA_ARBITRARY=1
      - PMA_HOST=db
      - PMA_USER=admin
      - PMA_PASSWORD=admin123
    depends_on:
      - db
    restart: unless-stopped

volumes:
  mysql_data:
    name: SISTEMA_NOVA_SALUD
